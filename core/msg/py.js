T2C.MSG.PY = {};

T2C.MSG.PY["LANGUAGE_NAME"] = "Python";
T2C.MSG.PY["TOOLBOX_CATEGORY_PSEUDO_JS_IO"] = "PseudoJS Input/Output";
T2C.MSG.PY["TOOLBOX_CATEGORY_JS_IO"] = "JavaScript Input/Output";
T2C.MSG.PY["TOOLBOX_CATEGORY_VARIABLES"] = "Variables";
T2C.MSG.PY["TOOLBOX_CATEGORY_MATH"] = "Math";
T2C.MSG.PY["TOOLBOX_CATEGORY_PSEUDO_JS_TEXT"] = "PseudoJS Text";
T2C.MSG.PY["TOOLBOX_CATEGORY_JS_TEXT"] = "JavaScript Text";
T2C.MSG.PY["TOOLBOX_CATEGORY_TYPE_IN_CODE"] = "Type in Code Blocks";
T2C.MSG.PY["TERMINAL_LET"] = "";
T2C.MSG.PY["TERMINAL_DISPLAY"] = "print";
T2C.MSG.PY["TEXT_PRINT_TITLE"] = "print(%1)";
T2C.MSG.PY["TEXT_PRINT_TOOLTIP"] = "Display the specified text, number or other value.";
T2C.MSG.PY["TERMINAL_GETINPUTBYASKING"] = "input";
T2C.MSG.PY["TEXT_INPUT_TITLE"] = "input(%1)";
T2C.MSG.PY["TEXT_PROMPT_TOOLTIP_TEXT"] = "Prompt the user for some text.";
T2C.MSG.PY["TEXT_PLUS_TOOLTIP_TEXT"] = "join together text";
T2C.MSG.PY["TEXT_T2C_LENGTH_TITLE"] = "len(%1)";
T2C.MSG.PY["TEXT_T2C_LENGTH_TOOLTIP"] = "Returns the number of letters (including spaces) in the provided text.";
T2C.MSG.PY["TERMINAL_GETCHARACTERNUMBER"] = "charAt";
T2C.MSG.PY["TEXT_T2C_CHARAT_TITLE"] = "%1[%2]";
T2C.MSG.PY["TEXT_CHARAT_FROM_START_TOOLTIP"] = "Returns the letter at the specified position.";
T2C.MSG.PY["TERMINAL_LENGTH"] = "len";
T2C.MSG.PY["TERMINAL_GETTEXTFROM"] = "substring";
T2C.MSG.PY["TERMINAL_GETTEXTFROMPOSITIONNUMBER"] = "substring";
T2C.MSG.PY["TERMINAL_GETTEXTTO"] = "";
T2C.MSG.PY["TERMINAL_TOPOSITIONNUMBER"] = "";
T2C.MSG.PY["TERMINAL_SUBSTRINGTAIL"] = "";
T2C.MSG.PY["TERMINAL_TAK_PAEN"] = "";
T2C.MSG.PY["TEXT_T2C_GET_SUBSTRING_TITLE"] = "%1[%2:%3]";
T2C.MSG.PY["TEXT_T2C_GET_SUBSTRING_TOOLTIP"] = "Returns a specified portion of the text.";
T2C.MSG.PY["TERMINAL_POSITIONNUMBEROFTEXT"] = "find";
T2C.MSG.PY["TERMINAL_FINDFIRSTOCCURRENCEOFTEXT"] = "find";
T2C.MSG.PY["TERMINAL_FINDFIRSTTAIL"] = "";
T2C.MSG.PY["TERMINAL_KE_STHITI_SANKHYA"] = "";
T2C.MSG.PY["TERMINAL_PARSEINT"] = "int";
T2C.MSG.PY["TERMINAL_PARSEFLOAT"] = "float";
T2C.MSG.PY["TERMINAL_TRUNC"] = "math.trunc";
T2C.MSG.PY["STATEMENT_SEPARATOR"] = "";
T2C.MSG.PY["TEXT_T2C_INDEXOF_TITLE"] = "%1.find(%2)";
T2C.MSG.PY["TEXT_T2C_INDEXOF_TOOLTIP"] = "Returns the index of the first/last occurrence of the first text in the second text. Returns %1 if text is not found.";
T2C.MSG.PY["TYPEIN_EXPRESSION_TITLE"] = "Enter Code Expression:";
T2C.MSG.PY["TYPEIN_EXPRESSION_TOOLTIP"] = "Type in a single code expression to be converted to blocks.";
T2C.MSG.PY["TYPEIN_STATEMENT_TITLE"] = "Enter Code Statement:";
T2C.MSG.PY["TYPEIN_STATEMENT_TOOLTIP"] = "Type in a single code statement to be converted to blocks.";
T2C.MSG.PY["BUTTON_CONVERT_TO_JS"] = "Convert PseudoJS blocks to JavaScript blocks";
T2C.MSG.PY["BUTTON_CONVERT_XML_TO_BLOCKS"] = "Convert XML to blocks";
T2C.MSG.PY["BUTTON_CONVERT_TEXT_TO_BLOCKS"] = "Convert text to blocks";
T2C.MSG.PY["BUTTON_RUN_CODE"] = "RUN BLOCK CODE!";
T2C.MSG.PY["HEADING_OUTPUT_APPEARS_BELOW"] = "Output will appear below";
T2C.MSG.PY["TEXTAREA_CODE_APPEARS_BELOW"] = "Code to appear here.";
T2C.MSG.PY["TEXTAREA_COPY_TEXT_HERE"] = "Copy text here to save/load blocks.";
T2C.MSG.PY["HEADING_BOTTOM_TEXT"] = "If you can describe the solution, you can code it. (At least that's the goal.)";
T2C.MSG.PY["CONFIRM_CONVERT_TEXT_TO_BLOCKS"] = "Clear workspace blocks and replace with blocks from below textual code?";
T2C.MSG.PY["BUTTON_SAVE_TEXT_CODE"] = "Save Python Code";
T2C.MSG.PY["BUTTON_SAVE_XML"] = "Save Block XML";
T2C.MSG.PY["BUTTON_LOAD_TEXT_CODE"] = "Load Python Code";
T2C.MSG.PY["BUTTON_LOAD_XML"] = "Load Block XML";

T2C.MSG.PY["FEEDBACK"] = "Feedback";
T2C.MSG.PY["DIRECTIONS"] = "Directions";

T2C.MSG.PY["TYPE_SOMETHING"] = "Type something";

T2C.MSG.PY["TYPEIN_ERROR_REMOVE_EXTRA_AT_END"] = "Remove %1 from the end.";
T2C.MSG.PY["TYPEIN_ERROR_TERMINAL_MISTYPED"] = "Check the spelling, case, and punctuation of what you're entering; it should identically match with %1.";
T2C.MSG.PY["TYPEIN_ERROR_MISSING_OPEN_PARENTHESIS"] = "You're missing an open parenthesis for %1.";
T2C.MSG.PY["TYPEIN_ERROR_MISSING_CLOSE_PARENTHESIS"] = "You're missing a closing parenthesis for %1.";
T2C.MSG.PY["TYPEIN_ERROR_MISSING_OPEN_BRACKET"] = "You're missing an opening bracket for %1.";
T2C.MSG.PY["TYPEIN_ERROR_MISSING_CLOSE_BRACKET"] = "You're missing a closing bracket for %1.";
T2C.MSG.PY["TYPEIN_ERROR_MISSING_PERIOD_AFTER_VARIABLE"] = "Be sure to include a period after the variable %1.";
T2C.MSG.PY["TYPEIN_WARNING_UNNECESSARY_OPEN_PARENTHESIS"] = "Although you *can* have multiple opening parentheses, it's not necessary in this instance.  When you first start programming, it may be good to include them to make sure operations are performed in the required order, but it can also make your code more difficult to read and correctly match the open parentheses with closing ones.  Before continuing, remove the extra opening parenthesis here since you don't need it.";
T2C.MSG.PY["TYPEIN_UNKNOWN_ERROR"] = "Try checking what you entered again for mistakes.";